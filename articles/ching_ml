<!DOCTYPE html
PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <!-- turn this into html5 -->
    <head><script src="//archive.org/includes/analytics.js?v=cf34f82" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app58.us.archive.org';v.server_ms=158;archive_analytics.send_pageview({});});</script><script type="text/javascript" src="/_static/js/playback.bundle.js?v=R56vIgLu" charset="utf-8"></script>
<script type="text/javascript" src="/_static/js/wombat.js?v=cRqOKCOw" charset="utf-8"></script>
<script type="text/javascript">
if (window._WBWombatInit) {
  wbinfo = {}
  wbinfo.url = "http://www.uncarved.com/articles/ching_ml";
  wbinfo.timestamp = "20160512183940";
  wbinfo.request_ts = "20160512183940";
  wbinfo.prefix = "https://web.archive.org/web/";
  wbinfo.mod = "if_";
  wbinfo.is_framed = false;
  wbinfo.is_live = false;
  wbinfo.coll = "web";
  wbinfo.proxy_magic = "";
  wbinfo.static_prefix = "/_static/";
  wbinfo.enable_auto_fetch = true;
  wbinfo.auto_fetch_worker_prefix = "https://web.archive.org/web/";
  wbinfo.wombat_ts = "20160512183940";
  wbinfo.wombat_sec = "1463078380";
  wbinfo.wombat_scheme = "https";
  wbinfo.wombat_host = "www.uncarved.com";
  wbinfo.ignore_prefixes = ["/__wb/",
                            "/_static/",
                            "/web/",
                            "http://analytics.archive.org/",
                            "https://analytics.archive.org/",
                            "//analytics.archive.org/",
                            "http://archive.org/",
                            "https://archive.org/",
                            "//archive.org/",
                            "http://faq.web.archive.org/",
                            "http://web.archive.org/",
                            "https://web.archive.org/"
                            ];
  wbinfo.wombat_opts = {};
  window._WBWombatInit(wbinfo);
}
__wm.init("https://web.archive.org/web");
</script>
<link rel="stylesheet" type="text/css" href="/_static/css/banner-styles.css?v=_99BHQfY" />
<link rel="stylesheet" type="text/css" href="/_static/css/iconochive.css?v=qtvMKcIJ" />
<!-- End Wayback Rewrite JS Include -->

        <meta http-equiv="content-type" content="text/html;charset=utf-8"/>
        <meta name="Author" content="Sean Hunter"/>
        <meta name="MSSmartTagsPreventParsing" content="TRUE"/>
        <meta name="description" content="In which I write yet another implementation of the book of changes (this time in ocaml) - <p>I decided to rewrite my python I Ching in ocaml.  This is i..."/>
		<link rel="stylesheet" type="text/css" href="/web/20160512183940cs_/http://www.uncarved.com/static/style.css"/>
        <link rel="self" type="text/html" href="http://www.uncarved.com/articles/ching_ml"/>
        <title>The Uncarved Blog: I  Ching in ML</title>
	</head>

	<body>
		<div id="left_menu">
			<ul>
                <li><a href="https://web.archive.org/web/20160512183940/http://www.uncarved.com/articles/ching_ml">permalink</a></li>
                <li><a href="https://web.archive.org/web/20160512183940/http://www.uncarved.com/">top</a></li>
                
				<li><a href="/web/20160512183940/http://www.uncarved.com/articles/contact">contact me</a></li>
				<li><a href="/web/20160512183940/http://www.uncarved.com/login/" rel="nofollow">not logged in</a></li>
                
			</ul>
		</div>
		<div class="body">
            
			<h2>
                
                I  Ching in ML
			</h2>
            

            
            <div class="precis">In which I write yet another implementation of the book of changes (this time in ocaml)</div>
            

            <p>I decided to rewrite my python I Ching in ocaml.  This is interesting to do in
some respects as it's not really a traditional functional programming task.</p>
<p>First we define the two basic oracles, the coin oracle and the yarrow stalk 
oracle.  Obviously on a computer we are actually sampling the same probability 
distribution as the oracle, not simulating the process itself.  How I do this 
is to just make a static array of all the outcomes and then choose from them 
with uniform probability.  This is a lot easier to write (and understand)
than trying to make a multifaceted biased coin and is equivalent from a 
probability point of view.</p>
<pre><code>let (consult_coin, consult_yarrow) = 
  (** choose one item from a given array with uniform probability *)
  let choose arr =
    let size = Array.length arr in
    let idx = Random.int(size) in
    arr.(idx) 
  in
  (* ...use this to consult the coin oracle... *)
  let consult_coin () =
    let outcomes = [| 
      9; 9;               (* Moving Yang --- x --- *)
      7; 7; 7; 7; 7; 7;   (* Stable Yang --------- *)
      8; 8; 8; 8; 8; 8;   (* Stable Yin  ---   --- *)
      6; 6                (* Moving Yin  --- o --- *)
    |] 
    in
      choose outcomes
  in
  (* ...and the yarrow oracle also. *)
  let consult_yarrow () =
    let outcomes = [| 
      9; 9; 9;             (* Moving Yang --- x --- *)
      7; 7; 7; 7; 7;       (* Stable Yang --------- *)
      8; 8; 8; 8; 8; 8; 8; (* Stable Yin  ---   --- *)
      6;                   (* Moving Yin  --- o --- *)
    |] 
    in
      choose outcomes
  in
    (consult_coin, consult_yarrow)
</code></pre>
<p>This is an example of how you define let binding which is private, yet shared
by more than one function.  In this case it's "choose", a helper function which
just picks an element from an array.  So we just define two public functions:</p>
<pre><code>val consult_coin : unit -&gt; int = &lt;fun&gt;
val consult_yarrow : unit -&gt; int = &lt;fun&gt;
</code></pre>
<p>Given those two functions, it's easy to return a hexagram using a given oracle.</p>
<pre><code>let get_hexagram ?(oracle=consult_yarrow) () =
  let rec pick lis =
    let len = List.length lis in
    if(len==6) then lis else pick ((oracle ())::lis)
  in
    pick []
</code></pre>
<p>A single divination actually derives two hexagrams, representing a change from
one state to another.  The original single hexagram contains "moving" lines
which are inverted in the second one.</p>
<pre><code>let get_hexagram_pair ?(oracle=consult_yarrow) ?(lines=[]) () =
  let lines = if(lines==[]) then (get_hexagram ~oracle ()) else lines in
  (* Given a hexagram, return a version with no moving lines by  
   * simply disregarding their moving statement.  Moving yang becomes 
   * yang, moving yin becomes yin *)
  let rec ignore_moving = 
    function
        [] -&gt; []
      | 9::res -&gt; 7::(ignore_moving res)
      | 6::res -&gt; 8::(ignore_moving res)
      | hd::res -&gt; hd::(ignore_moving res)
  in
  (* Given a hexagram, return a version with no moving lines by
   * inverting moving lines.  Moving yang becomes yin, moving yin 
   * becomes yang *)
  let rec invert_moving = 
    function
        [] -&gt; []
      | 9::res -&gt; 8::(invert_moving res)
      | 6::res -&gt; 7::(invert_moving res)
      | hd::res -&gt; hd::(invert_moving res)
  in
    (ignore_moving lines),(invert_moving lines)
</code></pre>
<p>Now you have the guts of a working I Ching. Full text  of the  code is <a href="https://web.archive.org/web/20160512183940/http://www.uncarved.com/static/ching.ml" title="The I-Ching implemented in ocaml">here</a>.</p>
		<hr/>
        <p class="footer">
        
        <span id="tags">Tags:
            
            <a href="https://web.archive.org/web/20160512183940/http://www.uncarved.com/tags/computers">computers</a>
            
        </span>
        
        Last modified: 2008-12-09T13:42:33Z</p>
        <p class="tagline">Unless otherwise specified the contents of this page are copyright &copy; 2015 <a href="https://web.archive.org/web/20160512183940/mailto:sean@uncarved.com">Sean Hunter</a>.  This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International <a rel="license" href="https://web.archive.org/web/20160512183940/http://creativecommons.org/licenses/by-sa/4.0/">License</a>.
        <!-- figure out metadata -->
	</p>
		</div>
    </body>
</html><!--
     FILE ARCHIVED ON 18:39:40 May 12, 2016 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 06:58:22 Jul 30, 2020.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  esindex: 0.016
  exclusion.robots.policy: 0.237
  LoadShardBlock: 42.029 (3)
  PetaboxLoader3.resolve: 25.93
  captures_list: 99.424
  PetaboxLoader3.datanode: 40.414 (4)
  exclusion.robots: 0.252
  CDXLines.iter: 21.252 (3)
  load_resource: 50.306
  RedisCDXSource: 31.969
-->