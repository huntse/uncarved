<!DOCTYPE html
PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <!-- turn this into html5 -->
    <head><script src="//archive.org/includes/analytics.js?v=cf34f82" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app103.us.archive.org';v.server_ms=222;archive_analytics.send_pageview({});});</script><script type="text/javascript" src="/_static/js/playback.bundle.js?v=R56vIgLu" charset="utf-8"></script>
<script type="text/javascript" src="/_static/js/wombat.js?v=cRqOKCOw" charset="utf-8"></script>
<script type="text/javascript">
if (window._WBWombatInit) {
  wbinfo = {}
  wbinfo.url = "http://www.uncarved.com/articles/ocaml_deriv_1";
  wbinfo.timestamp = "20160512184109";
  wbinfo.request_ts = "20160512184109";
  wbinfo.prefix = "https://web.archive.org/web/";
  wbinfo.mod = "if_";
  wbinfo.is_framed = false;
  wbinfo.is_live = false;
  wbinfo.coll = "web";
  wbinfo.proxy_magic = "";
  wbinfo.static_prefix = "/_static/";
  wbinfo.enable_auto_fetch = true;
  wbinfo.auto_fetch_worker_prefix = "https://web.archive.org/web/";
  wbinfo.wombat_ts = "20160512184109";
  wbinfo.wombat_sec = "1463078469";
  wbinfo.wombat_scheme = "https";
  wbinfo.wombat_host = "www.uncarved.com";
  wbinfo.ignore_prefixes = ["/__wb/",
                            "/_static/",
                            "/web/",
                            "http://analytics.archive.org/",
                            "https://analytics.archive.org/",
                            "//analytics.archive.org/",
                            "http://archive.org/",
                            "https://archive.org/",
                            "//archive.org/",
                            "http://faq.web.archive.org/",
                            "http://web.archive.org/",
                            "https://web.archive.org/"
                            ];
  wbinfo.wombat_opts = {};
  window._WBWombatInit(wbinfo);
}
__wm.init("https://web.archive.org/web");
</script>
<link rel="stylesheet" type="text/css" href="/_static/css/banner-styles.css?v=_99BHQfY" />
<link rel="stylesheet" type="text/css" href="/_static/css/iconochive.css?v=qtvMKcIJ" />
<!-- End Wayback Rewrite JS Include -->

        <meta http-equiv="content-type" content="text/html;charset=utf-8"/>
        <meta name="Author" content="Sean Hunter"/>
        <meta name="MSSmartTagsPreventParsing" content="TRUE"/>
        <meta name="description" content="Following on from the &quot;Learning Functional Programming&quot; article, we write our first call pricer - <p>So from the first <a href=&quot;http://www.uncarved.com/..."/>
		<link rel="stylesheet" type="text/css" href="/web/20160512184109cs_/http://www.uncarved.com/static/style.css"/>
        <link rel="self" type="text/html" href="http://www.uncarved.com/articles/ocaml_deriv_1"/>
        <title>The Uncarved Blog: Derivatives pricing in ocaml Part 1</title>
	</head>

	<body>
		<div id="left_menu">
			<ul>
                <li><a href="https://web.archive.org/web/20160512184109/http://www.uncarved.com/articles/ocaml_deriv_1">permalink</a></li>
                <li><a href="https://web.archive.org/web/20160512184109/http://www.uncarved.com/">top</a></li>
                
				<li><a href="/web/20160512184109/http://www.uncarved.com/articles/contact">contact me</a></li>
				<li><a href="/web/20160512184109/http://www.uncarved.com/login/" rel="nofollow">not logged in</a></li>
                
			</ul>
		</div>
		<div class="body">
            
			<h2>
                
                Derivatives pricing in ocaml Part 1
			</h2>
            

            
            <div class="precis">Following on from the &#34;Learning Functional Programming&#34; article, we write our first call pricer</div>
            

            <p>So from the first <a href="https://web.archive.org/web/20160512184109/http://www.uncarved.com/blog/ocaml_finance.mrk">article</a> we move on to write the first Monte Carlo pricer.  This is a very close translation of Joshi's implementation in part 1.3 (listings 1.1 to 1.3) except that I don't read the values in from stdin, I just hardcode them.</p>
<p>Writing this was fun, but I am extremely short of sleep so it was actually trickier than I expected.  It was made harder by the cryptic error messages that ocaml gives you when things go wrong.  These were almost always <code>This expression has type int but is here used with type float</code> which means you are passing int arguments to a float operator or function, rather than the other way around.</p>
<pre><code>% ocaml                                                           
    Objective Caml version 3.09.3

# 1 /. 2;;
This expression has type int but is here used with type float
# 1.0 / 2.0;;
This expression has type float but is here used with type int
</code></pre>
<p>I hope that makes it a little clearer.  I find it confusing anyway.  It's like the error message has been written by someone for whom English is a second language.  Perhaps that's the case.</p>
<p>Here's the listing without further ado.  On my computer it does a million paths in 13.2 seconds which is pretty decent I think.  The ocamlc compiler is fast as lightning too, compiling this to an executable in 0.029 secs on my machine.  If I go on learning ocaml I won't be able to go and get coffee while waiting for my code to compile.</p>
<pre><code>   (* mc1.ml - A rudimentary European call option pricer designed to mimic 
     * listings 1.1 to 1.3 in Joshi.
     *
     * Written by Sean Hunter &lt;sean@uncarved.com&gt;
     *
     * This is demonstration code only.  You are free to use it under the
     * Creative Commons Attribution 2.5 license, but don't expect it to
     * accurately price real options.
     *)
    open Random;;
    open Printf;;

    (* initialize the random number generator *)
    Random.self_init;;

    (* get a random gaussian using a Box-Muller transform, described
     * here http://en.wikipedia.org/wiki/Box-Muller_transform *)
    let rec get_one_gaussian_by_box_muller () =
        (* Generate two uniform numbers from -1 to 1 *)
        let x = Random.float 2.0 -. 1.0 in
        let y = Random.float 2.0 -. 1.0 in
        let s = x*.x +. y*.y in
        if s &gt; 1.0 then get_one_gaussian_by_box_muller ()
        else x *. sqrt (-2.0 *. (log s) /. s)
        ;;

    (* Price a European call using Monte Carlo. 
     * 
     * We pre-compute as much as possible before the simulation, then the 
     * actual mc paths are done as a nested recursive function.  This seems 
     * more idiomatically functional even though ocaml has for loops.
     *
     * It's also good because I couldn't get the other way to work.*)    
    let simple_monte_carlo1 expiry strike spot vol r num_paths =
        let variance = vol *. vol *. expiry in
        let root_variance = sqrt variance in
        let ito_correction = -0.5 *. variance in
        let moved_spot = spot *. exp (r *. expiry +. ito_correction) in
        let rec do_path i running_sum =
            if i &lt; num_paths then begin
                let this_gaussian = get_one_gaussian_by_box_muller () in
                let this_spot = moved_spot *. (exp (root_variance *. this_gaussian)) in
                let this_payoff = max (this_spot -. strike) 0.0 in
                do_path (i+1) (running_sum +. this_payoff)
            end
            else (running_sum /. (float_of_int num_paths)) *. (exp (-1.0 *. r *. expiry))
        in
        do_path 0 0.0
        ;;

    (* price a three-month call option near to the money.
     * we are using 35% vol and 4.5% interest rates*)    
    printf "%f\n" (simple_monte_carlo1 0.2 160.0 161.3 0.35 0.045 250000);;
</code></pre>
<p>This, however, is crying out for more flexibility.  The first thing to do is to see if we can get it to price other simple payoffs.  That's the subject of the <a href="https://web.archive.org/web/20160512184109/http://www.uncarved.com/blog/ocaml_deriv_2.mrk">next</a> article.</p>
		<hr/>
        <p class="footer">
        
        <span id="tags">Tags:
            
            <a href="https://web.archive.org/web/20160512184109/http://www.uncarved.com/tags/computers">computers</a>
            
        </span>
        
        Last modified: 2007-06-06T08:54:54Z</p>
        <p class="tagline">Unless otherwise specified the contents of this page are copyright &copy; 2015 <a href="https://web.archive.org/web/20160512184109/mailto:sean@uncarved.com">Sean Hunter</a>.  This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International <a rel="license" href="https://web.archive.org/web/20160512184109/http://creativecommons.org/licenses/by-sa/4.0/">License</a>.
        <!-- figure out metadata -->
	</p>
		</div>
    </body>
</html><!--
     FILE ARCHIVED ON 18:41:09 May 12, 2016 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 07:00:24 Jul 30, 2020.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  RedisCDXSource: 0.725
  load_resource: 97.952
  exclusion.robots.policy: 0.139
  PetaboxLoader3.resolve: 112.048 (2)
  captures_list: 118.561
  esindex: 0.012
  exclusion.robots: 0.151
  LoadShardBlock: 89.705 (3)
  PetaboxLoader3.datanode: 67.057 (4)
  CDXLines.iter: 23.862 (3)
-->