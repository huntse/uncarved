<!DOCTYPE html
PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <!-- turn this into html5 -->
    <head><script src="//archive.org/includes/analytics.js?v=cf34f82" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app103.us.archive.org';v.server_ms=1085;archive_analytics.send_pageview({});});</script><script type="text/javascript" src="/_static/js/playback.bundle.js?v=R56vIgLu" charset="utf-8"></script>
<script type="text/javascript" src="/_static/js/wombat.js?v=cRqOKCOw" charset="utf-8"></script>
<script type="text/javascript">
if (window._WBWombatInit) {
  wbinfo = {}
  wbinfo.url = "http://www.uncarved.com/articles/ocaml_finance";
  wbinfo.timestamp = "20160512181902";
  wbinfo.request_ts = "20160512181902";
  wbinfo.prefix = "https://web.archive.org/web/";
  wbinfo.mod = "if_";
  wbinfo.is_framed = false;
  wbinfo.is_live = false;
  wbinfo.coll = "web";
  wbinfo.proxy_magic = "";
  wbinfo.static_prefix = "/_static/";
  wbinfo.enable_auto_fetch = true;
  wbinfo.auto_fetch_worker_prefix = "https://web.archive.org/web/";
  wbinfo.wombat_ts = "20160512181902";
  wbinfo.wombat_sec = "1463077142";
  wbinfo.wombat_scheme = "https";
  wbinfo.wombat_host = "www.uncarved.com";
  wbinfo.ignore_prefixes = ["/__wb/",
                            "/_static/",
                            "/web/",
                            "http://analytics.archive.org/",
                            "https://analytics.archive.org/",
                            "//analytics.archive.org/",
                            "http://archive.org/",
                            "https://archive.org/",
                            "//archive.org/",
                            "http://faq.web.archive.org/",
                            "http://web.archive.org/",
                            "https://web.archive.org/"
                            ];
  wbinfo.wombat_opts = {};
  window._WBWombatInit(wbinfo);
}
__wm.init("https://web.archive.org/web");
</script>
<link rel="stylesheet" type="text/css" href="/_static/css/banner-styles.css?v=_99BHQfY" />
<link rel="stylesheet" type="text/css" href="/_static/css/iconochive.css?v=qtvMKcIJ" />
<!-- End Wayback Rewrite JS Include -->

        <meta http-equiv="content-type" content="text/html;charset=utf-8"/>
        <meta name="Author" content="Sean Hunter"/>
        <meta name="MSSmartTagsPreventParsing" content="TRUE"/>
        <meta name="description" content="I decided to teach myself ocaml by writing a derivatives pricer - <p>I have been interested in functional programming for some time, but finally decided..."/>
		<link rel="stylesheet" type="text/css" href="/web/20160512181902cs_/http://www.uncarved.com/static/style.css"/>
        <link rel="self" type="text/html" href="http://www.uncarved.com/articles/ocaml_finance"/>
        <title>The Uncarved Blog: Learning Functional Programming</title>
	</head>

	<body>
		<div id="left_menu">
			<ul>
                <li><a href="https://web.archive.org/web/20160512181902/http://www.uncarved.com/articles/ocaml_finance">permalink</a></li>
                <li><a href="https://web.archive.org/web/20160512181902/http://www.uncarved.com/">top</a></li>
                
				<li><a href="/web/20160512181902/http://www.uncarved.com/articles/contact">contact me</a></li>
				<li><a href="/web/20160512181902/http://www.uncarved.com/login/" rel="nofollow">not logged in</a></li>
                
			</ul>
		</div>
		<div class="body">
            
			<h2>
                
                Learning Functional Programming
			</h2>
            

            
            <div class="precis">I decided to teach myself ocaml by writing a derivatives pricer</div>
            

            <p>I have been interested in functional programming for some time, but finally decided to bite the bullet and learn properly, and that (for me anyway) means writing some code to accomplish a practical task.  My idea is to reimplement most of the C++ code in <a href="https://web.archive.org/web/20160512181902/http://www.markjoshi.com/">Mark Joshi's</a> excellent <a href="https://web.archive.org/web/20160512181902/http://www.markjoshi.com/design/index.htm">book</a> <em>C++ Design Patterns and Derivatives Pricing</em>, but in <a href="https://web.archive.org/web/20160512181902/http://caml.inria.fr/ocaml/index.en.html">ocaml</a>.  Now I'm a newcomer to <a href="https://web.archive.org/web/20160512181902/http://en.wikipedia.org/wiki/Functional_programming">functional programming</a> and to ocaml, so what I write won't be pretty or idiomatic, especially at first.  To begin with I'm learning from the main <a href="https://web.archive.org/web/20160512181902/http://www.ocaml-tutorial.org/">tutorial</a>.  If I find and use another I'll post that too.</p>
<p>I will try to explain some of the financial stuff that's going on as I do so, but for the full lowdown on why derivatives price the way they do, you need to learn some financial maths.  You could do a lot worse that picking up Joshi's <a href="https://web.archive.org/web/20160512181902/http://www.markjoshi.com/concepts/index.htm">other book</a>, <em>The Concepts and Practice of Mathematical Finance</em>.  A lot of people get <a href="https://web.archive.org/web/20160512181902/http://www.amazon.com/Options-Futures-Other-Derivatives-6th/dp/0131499084/ref=pd_bbs_2/104-9802601-8884745?ie=UTF8&amp;amp;s=books&amp;amp;qid=1181022494&amp;amp;sr=1-2">Hull</a>, but I prefer Joshi for a really practical introduction with great explanations of concepts.</p>
<p>So without further ado, here is my first ocaml program, which defines payoffs for vanilla European <a href="https://web.archive.org/web/20160512181902/http://en.wikipedia.org/wiki/Put_option">put</a> and <a href="https://web.archive.org/web/20160512181902/http://en.wikipedia.org/wiki/Call_option">call</a> options.  In fact Joshi starts off straight away with a <a href="https://web.archive.org/web/20160512181902/http://en.wikipedia.org/wiki/Monte_Carlo_method">Monte Carlo</a> pricer, but my copy is downstairs so I'm straying off-piste here.  It's my intention to follow Joshi step by step, and write up each one here as I go.</p>
<pre><code>    open Printf

    (* a vanilla option pays off the difference between the spot price
     * and the strike, or expires worthless *)
    let put_payoff strike spot=
            max ( strike -. spot ) 0.0;;

    let call_payoff strike spot=
            max (spot -. strike ) 0.0;;

    let print_payoff payoff strike spot=
            let outcome=payoff strike spot in
            printf "%f\n" outcome;;

    print_payoff call_payoff 195.0 190.0;;
    print_payoff call_payoff 195.0 200.0;;
    print_payoff put_payoff 195.0 190.0;;
    print_payoff put_payoff 190.0 195.0;;
</code></pre>
<p>Now I'm running and writing this on <a href="https://web.archive.org/web/20160512181902/http://fedoraproject.org/wiki/">fedora</a> <a href="https://web.archive.org/web/20160512181902/http://www.linux.org/">Linux</a>, and my ocaml is 3.09.3.  When I run this I see:</p>
<pre><code>% ocaml tmp/payoff.ml
5.000000
0.000000
0.000000
5.000000
</code></pre>
<p>Which is what I would expect.  Now this is very cheesy at present, but it's a start and we'll improve it in the next <a href="https://web.archive.org/web/20160512181902/http://www.uncarved.com/blog/ocaml_deriv_1.mrk">article</a>.  It's worth a couple of observations about this because already this demonstrates a few things that strike me as being interesting about ocaml.  For one thing, there isn't any default type promotion or operator overloading, so we need to explicitly qualify our constants with <code>.0</code> to get them to be floats.  Secondly, we need to use <code>-.</code> to subtract them.  The <code>max</code> function can operate on any type so it works with floats or ints.</p>
		<hr/>
        <p class="footer">
        
        <span id="tags">Tags:
            
            <a href="https://web.archive.org/web/20160512181902/http://www.uncarved.com/tags/computers">computers</a>
            
        </span>
        
        Last modified: 2007-06-05T21:08:53Z</p>
        <p class="tagline">Unless otherwise specified the contents of this page are copyright &copy; 2015 <a href="https://web.archive.org/web/20160512181902/mailto:sean@uncarved.com">Sean Hunter</a>.  This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International <a rel="license" href="https://web.archive.org/web/20160512181902/http://creativecommons.org/licenses/by-sa/4.0/">License</a>.
        <!-- figure out metadata -->
	</p>
		</div>
    </body>
</html><!--
     FILE ARCHIVED ON 18:19:02 May 12, 2016 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 07:00:41 Jul 30, 2020.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  RedisCDXSource: 5.83
  load_resource: 785.198
  exclusion.robots.policy: 0.167
  PetaboxLoader3.resolve: 87.564 (2)
  captures_list: 293.157
  esindex: 0.009
  exclusion.robots: 0.18
  LoadShardBlock: 265.861 (3)
  PetaboxLoader3.datanode: 955.68 (4)
  CDXLines.iter: 18.266 (3)
-->