<!DOCTYPE html
PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <!-- turn this into html5 -->
    <head><script src="//archive.org/includes/analytics.js?v=cf34f82" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app101.us.archive.org';v.server_ms=397;archive_analytics.send_pageview({});});</script><script type="text/javascript" src="/_static/js/playback.bundle.js?v=R56vIgLu" charset="utf-8"></script>
<script type="text/javascript" src="/_static/js/wombat.js?v=cRqOKCOw" charset="utf-8"></script>
<script type="text/javascript">
if (window._WBWombatInit) {
  wbinfo = {}
  wbinfo.url = "http://www.uncarved.com/articles/ocaml_classes";
  wbinfo.timestamp = "20160512184000";
  wbinfo.request_ts = "20160512184000";
  wbinfo.prefix = "https://web.archive.org/web/";
  wbinfo.mod = "if_";
  wbinfo.is_framed = false;
  wbinfo.is_live = false;
  wbinfo.coll = "web";
  wbinfo.proxy_magic = "";
  wbinfo.static_prefix = "/_static/";
  wbinfo.enable_auto_fetch = true;
  wbinfo.auto_fetch_worker_prefix = "https://web.archive.org/web/";
  wbinfo.wombat_ts = "20160512184000";
  wbinfo.wombat_sec = "1463078400";
  wbinfo.wombat_scheme = "https";
  wbinfo.wombat_host = "www.uncarved.com";
  wbinfo.ignore_prefixes = ["/__wb/",
                            "/_static/",
                            "/web/",
                            "http://analytics.archive.org/",
                            "https://analytics.archive.org/",
                            "//analytics.archive.org/",
                            "http://archive.org/",
                            "https://archive.org/",
                            "//archive.org/",
                            "http://faq.web.archive.org/",
                            "http://web.archive.org/",
                            "https://web.archive.org/"
                            ];
  wbinfo.wombat_opts = {};
  window._WBWombatInit(wbinfo);
}
__wm.init("https://web.archive.org/web");
</script>
<link rel="stylesheet" type="text/css" href="/_static/css/banner-styles.css?v=_99BHQfY" />
<link rel="stylesheet" type="text/css" href="/_static/css/iconochive.css?v=qtvMKcIJ" />
<!-- End Wayback Rewrite JS Include -->

        <meta http-equiv="content-type" content="text/html;charset=utf-8"/>
        <meta name="Author" content="Sean Hunter"/>
        <meta name="MSSmartTagsPreventParsing" content="TRUE"/>
        <meta name="description" content="Writing some objects in ocaml, we begin to make the pricer more flexible - <p>The next in the somewhat haphazard series that began <a href=&quot;http://www.u..."/>
		<link rel="stylesheet" type="text/css" href="/web/20160512184000cs_/http://www.uncarved.com/static/style.css"/>
        <link rel="self" type="text/html" href="http://www.uncarved.com/articles/ocaml_classes"/>
        <title>The Uncarved Blog: Ocaml objects part 1</title>
	</head>

	<body>
		<div id="left_menu">
			<ul>
                <li><a href="https://web.archive.org/web/20160512184000/http://www.uncarved.com/articles/ocaml_classes">permalink</a></li>
                <li><a href="https://web.archive.org/web/20160512184000/http://www.uncarved.com/">top</a></li>
                
				<li><a href="/web/20160512184000/http://www.uncarved.com/articles/contact">contact me</a></li>
				<li><a href="/web/20160512184000/http://www.uncarved.com/login/" rel="nofollow">not logged in</a></li>
                
			</ul>
		</div>
		<div class="body">
            
			<h2>
                
                Ocaml objects part 1
			</h2>
            

            
            <div class="precis">Writing some objects in ocaml, we begin to make the pricer more flexible</div>
            

            <p>The next in the somewhat haphazard series that began <a href="https://web.archive.org/web/20160512184000/http://www.uncarved.com/blog/ocaml_finance.mrk">here</a> in which I
learn a bit about ocaml objects, and in so doing, also learn why Joshi proposes
a parameter's class and how to calculate simple integrals.</p>
<p>The purpose of this exercise was to learn how to do object-oriented programming
in ocaml, so I pick up where Joshi suggests modifying the Monte Carlo simulator
to take "parameters" objects instead of floats for vol and rates.  The purpose
of this modification is that ultimately we will then be able to use functions
as parameters to our models, rather than just constants.  I begin by defining
the interface to these "parameter" classes.  This will define what these
parameter objects can do.</p>
<pre><code>(** interface for all parameter classes. Users of parameter classes expect
* this interface *)
class type parameter_type =
object
    method integral :       float -&gt; float -&gt; float
    method integral_sq :    float -&gt; float -&gt; float
    method mean :           float -&gt; float -&gt; float
    method root_mean_sq :   float -&gt; float -&gt; float
end;;
</code></pre>
<p>This is a direct translation of Joshi's interface.  I'm not 100% sure we really
need this, but it does mean that differences between various parameters classes
and their private members can be hidden behind this interface.</p>
<p>So given that, we can adapt the mc:</p>
<pre><code>(* Price an option with a flexible payoff using Monte Carlo. 
*
* Use 'parameters' objects for vol and rates to allow passing flexible
* parameters *)
let sim ~payoff ~expiry ~spot ~vol ~r ~num_paths =
    let variance = vol#integral_sq 0.0 expiry in
    let root_variance = sqrt variance in
    let ito_correction = -0.5 *. variance in
    let integral_r = r#integral 0.0 expiry in
    let moved_spot = spot *. exp (integral_r +. ito_correction) in
    let rec do_path i running_sum =
        if i &lt; num_paths then begin
            let this_gaussian = Gaussian.get_one_gaussian () in
            let this_spot = moved_spot *. (exp (root_variance *. this_gaussian)) in
            let this_payoff = payoff ~spot:this_spot in
            do_path (i+1) (running_sum +. this_payoff)
        end
        else (running_sum /. (float_of_int num_paths)) *. (exp (-1.0 *. integral_r))
    in
    do_path 0 0.0
    ;;
</code></pre>
<p>as you can see, the difference here is that we are calling the "integral_sq"
method on the vol parameter, and the "integral" method on the rates parameter.
If we put this into the toploop the type has changed to:</p>
<pre><code>val sim :
  payoff:(spot:float -&gt; float) -&gt;
  expiry:'a -&gt;
  spot:float -&gt;
  vol:&lt; integral_sq : float -&gt; 'a -&gt; float; .. &gt; -&gt;
  r:&lt; integral : float -&gt; 'a -&gt; float; .. &gt; -&gt; num_paths:int -&gt; float = &lt;fun&gt;
</code></pre>
<p>So vol and r are params which have an integral and integral_sq method, which
have two arguments, and return a float in each case.  We could get rid of the
polymorphic argument by explicitly specifying the type of the expiry argument,
but I'm not sure how to do that for named args.  <code>~expiry:float</code> gives a syntax
error anyway- I suppose I could write an explicit sig for the function but it
works without it.</p>
<p>Now we can write the base parameters class.  This is an abstract class- derived
classes will specify how to take the integral and the integral of the square.
In this mc model we don't use the concrete methods of this class but presumably
they come in handy later.</p>
<pre><code>(** base class specifying the mean and root_mean_sq methods in terms of
  * the integral and integral_sq, but don't define those.  This allows us
  * to define them for any type of parameter *)
class virtual parameter =
object(self)
    method virtual integral :       float -&gt; float -&gt; float
    method virtual integral_sq :    float -&gt; float -&gt; float
    method mean t1 t2 = (self#integral t1 t2) /. (t2 -. t1)
    method root_mean_sq t1 t2 = (self#integral_sq t1 t2) /. (t2 -. t1)
end;;
</code></pre>
<p>Now it's simplicity itself to write our first class, which models a constant parameter:</p>
<pre><code>(** class for constant parameters.  This class will be hidden behind the
* parameter_type interface *)
class parameter_const' x =
object(self)
    inherit parameter
    val x_sq = x*.x
    method integral t1 t2 = (t2-.t1) *. x;
    method integral_sq t1 t2 = (t2-.t1) *. x_sq;
end;;
</code></pre>
<p>I add an alias to this (without the tick), which hides the implementation
behind the parameter_type interface:</p>
<pre><code>(** Constant parameters class with implementation hidden *)
class parameter_const x = (parameter_const' x : parameter_type);;
</code></pre>
<p>The type of <code>parameter_const'</code> is </p>
<pre><code>class parameter_const' :
  float -&gt;
  object
    val x_sq : float
    method integral : float -&gt; float -&gt; float
    method integral_sq : float -&gt; float -&gt; float
    method mean : float -&gt; float -&gt; float
    method root_mean_sq : float -&gt; float -&gt; float
  end
</code></pre>
<p>whereas the type of <code>parameter_const</code> is </p>
<pre><code>class parameter_const : float -&gt; parameter_type
</code></pre>
<p>...which seems to express the idea of the class much better.</p>
<p>At this point we can run our Monte-Carlo using constant parameters by doing this sort of thing:</p>
<pre><code>    let mc payoff =
        Mc.sim
            ~payoff:payoff
            ~expiry:0.25
            ~spot:1.613
            ~vol:(new Param.parameter_const 0.35)
            ~r:(new Param.parameter_const 0.055)
            ~num_paths:num_paths
;;
</code></pre>
<p>If you're thinking "so what?  That's no better than what we had before except
probably a bit slower and certainly harder to read", then I am sympathetic to
this point of view.  <a href="https://web.archive.org/web/20160512184000/http://www.uncarved.com/blog/ocaml_classes_2.mrk">Next</a> we look at other parameters classes and suddenly it starts to become useful.</p>
		<hr/>
        <p class="footer">
        
        <span id="tags">Tags:
            
            <a href="https://web.archive.org/web/20160512184000/http://www.uncarved.com/tags/computers">computers</a>
            
        </span>
        
        Last modified: 2007-06-19T19:36:27Z</p>
        <p class="tagline">Unless otherwise specified the contents of this page are copyright &copy; 2015 <a href="https://web.archive.org/web/20160512184000/mailto:sean@uncarved.com">Sean Hunter</a>.  This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International <a rel="license" href="https://web.archive.org/web/20160512184000/http://creativecommons.org/licenses/by-sa/4.0/">License</a>.
        <!-- figure out metadata -->
	</p>
		</div>
    </body>
</html><!--
     FILE ARCHIVED ON 18:40:00 May 12, 2016 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 06:59:10 Jul 30, 2020.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  RedisCDXSource: 4.628
  LoadShardBlock: 221.618 (3)
  esindex: 0.01
  captures_list: 246.572
  PetaboxLoader3.datanode: 106.605 (4)
  exclusion.robots: 0.136
  CDXLines.iter: 17.074 (3)
  exclusion.robots.policy: 0.126
  load_resource: 145.045
  PetaboxLoader3.resolve: 223.686 (2)
-->